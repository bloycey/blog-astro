---
import "../styles/global.css";
import FooterWithSubscribe from "../components/FooterWithSubscribe.astro";
import DarkmodeToggler from "../components/DarkmodeToggler.astro";
const { title, image, description } = Astro.props;
const url = Astro.url;
---

<!DOCTYPE html>
<html lang="en" class="">
	<head>
		<meta charset="UTF-8" />
		<meta http-equiv="X-UA-Compatible" content="IE=edge" />
		<meta name="viewport" content="width=device-width" />
		<meta name="description" content={description || "Bloycey's Blog"} />
		<meta property="og:title" content={`Bloycey's Blog: ${title}`} />
		<meta property="og:type" content="article" />
		<meta property="og:url" content={url} />
		<meta property="og:image" content={image} />
		<meta property="og:site_name" content="Bloycey Blog" />
		<meta property="twitter:card" content="summary_large_image" />
		<meta property="twitter:title" content={`Bloycey Blog: ${title}`} />
		<meta
			property="twitter:description"
			content={description || "Bloycey's Blog"}
		/>
		<meta property="twitter:image" content={image} />
		<meta property="twitter:site" content="@bloycey" />
		<meta property="twitter:creator" content="@bloycey" />
		<link rel="icon" type="image/svg+xml" href="assets/images/logo.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>Bloycey Blog: {title}</title>
		<link rel="icon" type="image/svg+xml" href="/logo.svg" />
		<link rel="alternate icon" href="/favicon.ico" />
		<script is:inline>
			const darkmode = localStorage.getItem("darkmode");
			if (darkmode === "true") {
				document.documentElement.classList.add("dark");
			} else {
				document.documentElement.classList.remove("dark");
			}
		</script>
	</head>
	<body>
		<nav id="menu-overlay" class="display-none">
			<ul>
				<li>
					<a
						href="/"
						aria-current={url.pathname === "/" ||
						url.pathname.includes("/posts")
							? "page"
							: "false"}>Blog</a
					>
				</li>
				<li>
					<a
						href="/useful-links-library"
						aria-current={url.pathname === "/useful-links-library"
							? "page"
							: "false"}>Useful links</a
					>
				</li>
				<li>
					<a
						href="/about"
						aria-current={url.pathname === "/about"
							? "page"
							: "false"}>Who is bloycey?</a
					>
				</li>
				<li class="dark-wrapper">
					<DarkmodeToggler />
				</li>
			</ul>
			<button class="menu-toggle close-btn">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					fill="none"
					viewBox="0 0 24 24"
					stroke-width="1.5"
					stroke="currentColor"
					class="w-6 h-6"
				>
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						d="M6 18L18 6M6 6l12 12"></path>
				</svg>
				<span> Close</span>
			</button>
		</nav>
		<nav class="main-nav">
			<a href="/" class="mono">bloycey.blog</a>
			<div class="menu-right">
				<button class="menu-toggle">
					<svg
						xmlns="http://www.w3.org/2000/svg"
						fill="none"
						viewBox="0 0 24 24"
						stroke-width="1.5"
						stroke="currentColor"
						class="w-6 h-6"
					>
						<path
							stroke-linecap="round"
							stroke-linejoin="round"
							d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"
						></path>
					</svg>
					<span> Menu</span>
				</button>
			</div>
		</nav>
		<main>
			<slot />
		</main>
		<FooterWithSubscribe />
		<script
			is:inline
			src="https://cdn.jsdelivr.net/npm/js-confetti@latest/dist/js-confetti.browser.js"
		></script>
	</body>
</html>

<script>
	window.addEventListener("DOMContentLoaded", event => {
		const menuOverlay = document.getElementById("menu-overlay");
		const menuBtns = document.querySelectorAll(".menu-toggle");

		const menuIsOpen = () => {
			const menuOverlay = document.getElementById("menu-overlay");
			return !menuOverlay.classList.contains("display-none");
		};

		const focusFirstMenuItem = () => {
			const firstListItem = menuOverlay.querySelector("li a");
			firstListItem.focus();
		};

		document.addEventListener("focusin", event => {
			if (menuIsOpen() && !menuOverlay.contains(event.target)) {
				focusFirstMenuItem();
			}
		});

		window.addEventListener("keydown", event => {
			if (event.key === "Escape" && menuIsOpen()) {
				menuOverlay.classList.add("display-none");
			}
		});

		menuBtns.forEach(btn => {
			btn.addEventListener("click", () => {
				toggleMenu();
			});
		});

		const toggleMenu = () => {
			menuOverlay.classList.toggle("display-none");
			if (menuIsOpen()) {
				focusFirstMenuItem();
			}
		};
	});
</script>

<style>
	.menu-right {
		display: flex;
		gap: 1rem;
	}
	.main-nav a:focus-visible,
	.main-nav button:focus-visible,
	#menu-overlay a:focus-visible,
	#menu-overlay button:focus-visible {
		outline-color: #ffffff;
	}
	#menu-overlay {
		display: flex;
		align-items: center;
		justify-content: center;
		position: fixed;
		top: 0;
		bottom: 0;
		left: 0;
		right: 0;
		background-image: radial-gradient(
			circle,
			var(--dark-red),
			var(--red),
			var(--light-red)
		);
		z-index: 99;
	}

	#menu-overlay a {
		color: #ffffff;
		font-size: 8vw;
		text-decoration: none;
		font-weight: bold;
		text-transform: uppercase;
		display: block;
		line-height: 1.1;
	}

	#menu-overlay a[aria-current="page"] {
		text-decoration: underline;
		text-decoration-style: wavy;
		text-underline-offset: 0.5rem;
		padding-bottom: 1rem;
	}

	#menu-overlay ul {
		list-style: none;
		padding: 0;
	}

	#menu-overlay ul li {
		transition: 0.3s ease;
		margin-bottom: 1.5rem;
	}

	#menu-overlay ul li:not(.dark-wrapper):hover {
		transform: translateY(-0.25rem);
	}
	.close-btn {
		position: absolute;
		top: 0.5rem;
		right: 1rem;
	}
	.menu-toggle {
		color: #ffffff;
		border: 0;
		padding: 0;
		background-color: transparent;
		z-index: 11;
		display: flex;
		align-items: center;
		gap: 0.25rem;
		cursor: pointer;
	}

	.menu-toggle svg {
		width: 1.25rem;
	}
	main {
		min-height: 50vh;
	}
	.main-nav {
		padding: 0.75rem 1rem;
		display: flex;
		justify-content: space-between;
		align-items: center;
		background-color: var(--red);
	}

	@media (min-width: 767px) {
		.main-nav {
			padding: 0.5rem 1rem;
		}
	}

	.main-nav a {
		text-decoration: none;
		color: white;
		font-size: 1rem;
	}
</style>
